config:
  target: "https://localhost:7283"
  phases:
    # Fase de aquecimento - 30 segundos
    - duration: 30
      arrivalRate: 5
      name: "Warmup"
    
    # Fase de carga crescente - 2 minutos
    - duration: 120
      arrivalRate: 10
      rampTo: 50
      name: "Ramp up load"
    
    # Fase de carga sustentada - 3 minutos
    - duration: 180
      arrivalRate: 50
      name: "Sustained load"
    
    # Fase de pico de carga - 1 minuto
    - duration: 60
      arrivalRate: 100
      name: "Peak load"

  # Configurações de performance e limites
  http:
    timeout: 10
    pool: 50
  
  # Métricas e critérios de aprovação
  ensure:
    # Taxa de sucesso > 99%
    - p99 < 2000  # 99% das requisições devem responder em menos de 2s
    - p95 < 1000  # 95% das requisições devem responder em menos de 1s
    - p50 < 500   # 50% das requisições devem responder em menos de 500ms
    - maxErrorRate: 1  # Máximo 1% de erro
    
  variables:
    medidorId:
      - "MED001"
      - "MED002" 
      - "MED003"
      - "MED004"
      - "MED005"

  processor: "./artillery-functions.js"
  plugins:
    metrics-by-endpoint: {}
    expect: {}

before:
  flow:
    # Verificações iniciais
    - function: "monitorApiHealth"
    - function: "trackMemoryUsage"

scenarios:
  # Cenário 1: Inserção de leituras (70% do tráfego)
  - weight: 70
    name: "Inserir Leituras"
    flow:
      - function: "generateValidTimestamp"
      - function: "generateLeituraData"
      - function: "trackConcurrentUsers"
      - post:
          url: "/api/medidores/{{ medidorId }}/leituras"
          headers:
            Content-Type: "application/json"
          json:
            timestamp: "{{ validTimestamp }}"
            tensao: "{{ leituraData.tensao }}"
            corrente: "{{ leituraData.corrente }}"
            potenciaAtiva: "{{ leituraData.potenciaAtiva }}"
            potenciaReativa: "{{ leituraData.potenciaReativa }}"
            energiaAtivaDireta: "{{ leituraData.energiaAtivaDireta }}"
            energiaAtivaReversa: "{{ leituraData.energiaAtivaReversa }}"
            fatorPotencia: "{{ leituraData.fatorPotencia }}"
            frequencia: "{{ leituraData.frequencia }}"
          expect:
            - statusCode: 201
          capture:
            - json: "$.id"
              as: "leituraId"
      - function: "logPerformanceMetrics"
      - function: "monitorDatabaseMetrics"
      - function: "validateDataConsistency"

  # Cenário 2: Consulta de leituras recentes (25% do tráfego)
  - weight: 25
    name: "Consultar Leituras Recentes"
    flow:
      - function: "generateQueryPeriod"
      - function: "trackConcurrentUsers"
      - get:
          url: "/api/medidores/{{ medidorId }}/leituras"
          qs:
            dataInicio: "{{ dataInicio }}"
            dataFim: "{{ dataFim }}"
            limite: 50
          expect:
            - statusCode: 200
      - function: "logPerformanceMetrics"
      - function: "monitorDatabaseMetrics"

  # Cenário 3: Consulta de leituras históricas (5% do tráfego)
  - weight: 5
    name: "Consultar Leituras Históricas"
    flow:
      - function: "generateQueryPeriod"
      - function: "trackConcurrentUsers"
      - get:
          url: "/api/medidores/{{ medidorId }}/leituras"
          qs:
            dataInicio: "{{ dataInicio }}"
            dataFim: "{{ dataFim }}"
            limite: 100
          expect:
            - statusCode: 200
      - function: "logPerformanceMetrics"
      - function: "monitorDatabaseMetrics"
      - function: "trackMemoryUsage"

  # Cenário 4: Health Check
  - weight: 0
    name: "Health Check"
    flow:
      - get:
          url: "/health"
          expect:
            - statusCode: 200
      - function: "monitorApiHealth"