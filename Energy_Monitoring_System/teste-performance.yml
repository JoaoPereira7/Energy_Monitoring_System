config:
  target: "https://localhost:7283"
  phases:
    # Fase de aquecimento - 30 segundos
    - duration: 30
      arrivalRate: 5
      name: "Warmup"
    
    # Fase de carga crescente - 2 minutos
    - duration: 120
      arrivalRate: 10
      rampTo: 50
      name: "Ramp up load"
    
    # Fase de carga sustentada - 3 minutos
    - duration: 180
      arrivalRate: 50
      name: "Sustained load"
    
    # Fase de pico de carga - 1 minuto
    - duration: 60
      arrivalRate: 100
      name: "Peak load"

  # Configurações de performance e limites
  http:
    timeout: 10
    pool: 50
  
  # Métricas e critérios de aprovação
  ensure:
    # Taxa de sucesso > 99%
    - p99 < 2000  # 99% das requisições devem responder em menos de 2s
    - p95 < 1000  # 95% das requisições devem responder em menos de 1s
    - p50 < 500   # 50% das requisições devem responder em menos de 500ms
    - maxErrorRate: 1  # Máximo 1% de erro
    
  variables:
    medidorId:
      - "MED001"
      - "MED002" 
      - "MED003"
      - "MED004"
      - "MED005"

scenarios:
  # Cenário 1: Inserção de leituras (70% do tráfego)
  - weight: 70
    name: "Inserir Leituras"
    flow:
      - post:
          url: "/api/medidores/{{ medidorId }}/leituras"
          headers:
            Content-Type: "application/json"
          json:
            timestamp: "{{ $moment().subtract(1, 'minutes').toISOString() }}"
            tensao: "{{ $randomNumber(200, 240) }}.{{ $randomNumber(10, 99) }}"
            corrente: "{{ $randomNumber(10, 20) }}.{{ $randomNumber(10, 99) }}"
            potenciaAtiva: "{{ $randomNumber(2000, 4000) }}.{{ $randomNumber(10, 99) }}"
            potenciaReativa: "{{ $randomNumber(500, 1000) }}.{{ $randomNumber(10, 99) }}"
            energiaAtivaDireta: "{{ $randomNumber(1000, 2000) }}.{{ $randomNumber(10, 99) }}"
            energiaAtivaReversa: "{{ $randomNumber(20, 100) }}.{{ $randomNumber(10, 99) }}"
            fatorPotencia: "0.{{ $randomNumber(80, 99) }}"
            frequencia: "{{ $randomNumber(59, 61) }}.{{ $randomNumber(1, 9) }}"
          expect:
            - statusCode: 201
          capture:
            - json: "$.id"
              as: "leituraId"

  # Cenário 2: Consulta de leituras recentes (25% do tráfego)
  - weight: 25
    name: "Consultar Leituras Recentes"
    flow:
      - get:
          url: "/api/medidores/{{ medidorId }}/leituras"
          qs:
            dataInicio: "{{ $moment().subtract(1, 'hours').toISOString() }}"
            dataFim: "{{ $moment().toISOString() }}"
            limite: 50
          expect:
            - statusCode: 200

  # Cenário 3: Consulta de leituras históricas (5% do tráfego)
  - weight: 5
    name: "Consultar Leituras Históricas"
    flow:
      - get:
          url: "/api/medidores/{{ medidorId }}/leituras"
          qs:
            dataInicio: "{{ $moment().subtract(7, 'days').toISOString() }}"
            dataFim: "{{ $moment().subtract(1, 'days').toISOString() }}"
            limite: 100
          expect:
            - statusCode: 200

  # Cenário 4: Health Check
  - weight: 0
    name: "Health Check"
    flow:
      - get:
          url: "/health"
          expect:
            - statusCode: 200

# Configurações adicionais para relatórios
plugins:
  expect: {}
  
# Configuração de logging
processor: "./artillery-functions.js"